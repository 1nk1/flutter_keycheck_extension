import * as vscode from 'vscode';
import { TestingKey } from '../models/testingKey';
import { WidgetHighlighter } from './widgetHighlighter';
import { ContextAnalyzer, KeyContext } from './contextAnalyzer';
import { DartParser } from '../utils/dartParser';
import { FileUtils } from '../utils/fileUtils';

/**
 * NavigationService - –°–µ—Ä–≤–∏—Å –¥–ª—è —É–º–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–ª–∏–∫—É –≤ Widget Tree
 * 
 * –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
 * - –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é –∫–ª—é—á–∞ —Å —Ç–æ—á–Ω—ã–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 * - –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
 * - –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Widget –≥—Ä–∞–Ω–∏—Ü–∞—Ö
 * - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∫–ª—é—á–∞
 */
export class NavigationService {
    private widgetHighlighter: WidgetHighlighter;
    private contextAnalyzer: ContextAnalyzer;
    private activeDecorations: Map<string, vscode.TextEditorDecorationType[]> = new Map();

    constructor() {
        this.widgetHighlighter = new WidgetHighlighter();
        this.contextAnalyzer = new ContextAnalyzer();
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é –∫–ª—é—á–∞
     */
    async navigateToKeyDefinition(testingKey: TestingKey): Promise<boolean> {
        try {
            if (!testingKey.usageLocations || testingKey.usageLocations.length === 0) {
                return await this.navigateToKeyDeclaration(testingKey);
            }

            // –ï—Å–ª–∏ —É –∫–ª—é—á–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—ã–±–æ—Ä–∞
            if (testingKey.usageLocations.length > 1) {
                return await this.handleMultipleUsages(testingKey);
            }

            // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
            return await this.navigateToSingleUsage(testingKey, testingKey.usageLocations[0]);

        } catch (error) {
            console.error('Navigation error:', error);
            vscode.window.showErrorMessage(`Navigation failed: ${error}`);
            return false;
        }
    }

    /**
     * –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é –∫–ª—é—á–∞ (–≤ KeyConstants —Ñ–∞–π–ª–µ)
     */
    private async navigateToKeyDeclaration(testingKey: TestingKey): Promise<boolean> {
        try {
            const uri = vscode.Uri.file(testingKey.filePath);
            const position = new vscode.Position(testingKey.line - 1, 0);
            const range = new vscode.Range(position, position);

            // –û—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é
            const document = await vscode.workspace.openTextDocument(uri);
            const editor = await vscode.window.showTextDocument(document);
            
            // –¢–æ—á–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –Ω–∞ –∫–ª—é—á
            const keyPosition = await this.findExactKeyPosition(document, testingKey);
            if (keyPosition) {
                editor.selection = new vscode.Selection(keyPosition, keyPosition);
                editor.revealRange(new vscode.Range(keyPosition, keyPosition), vscode.TextEditorRevealType.InCenter);
            } else {
                editor.selection = new vscode.Selection(position, position);
                editor.revealRange(range, vscode.TextEditorRevealType.InCenter);
            }

            // –ü–æ–¥—Å–≤–µ—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞
            await this.highlightKeyDeclaration(editor, testingKey);

            // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            vscode.window.showInformationMessage(
                `üìç Key declaration: ${testingKey.name}`,
                { modal: false }
            );

            return true;
        } catch (error) {
            console.error('Error navigating to key declaration:', error);
            return false;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∫–ª—é—á–∞
     */
    private async handleMultipleUsages(testingKey: TestingKey): Promise<boolean> {
        const usageItems: vscode.QuickPickItem[] = testingKey.usageLocations!.map((location, index) => {
            const relativePath = vscode.workspace.asRelativePath(location.uri.fsPath);
            const line = location.range.start.line + 1;
            
            return {
                label: `${relativePath}:${line}`,
                description: `Usage ${index + 1} of ${testingKey.usageLocations!.length}`,
                detail: this.getUsagePreview(location)
            };
        });

        // –î–æ–±–∞–≤–∏—Ç—å –æ–ø—Ü–∏—é –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é
        usageItems.unshift({
            label: `üìã Declaration in ${vscode.workspace.asRelativePath(testingKey.filePath)}`,
            description: `Line ${testingKey.line}`,
            detail: `Go to key declaration: ${testingKey.name} = '${testingKey.value}'`
        });

        const selectedItem = await vscode.window.showQuickPick(usageItems, {
            placeHolder: `Select location for key: ${testingKey.name}`,
            matchOnDescription: true,
            matchOnDetail: true
        });

        if (!selectedItem) {
            return false;
        }

        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        if (selectedItem.label.startsWith('üìã Declaration')) {
            return await this.navigateToKeyDeclaration(testingKey);
        }

        // –ù–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        const usageIndex = usageItems.indexOf(selectedItem) - 1; // -1 –∏–∑-–∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        const location = testingKey.usageLocations![usageIndex];
        
        return await this.navigateToSingleUsage(testingKey, location);
    }

    /**
     * –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫–ª—é—á–∞
     */
    private async navigateToSingleUsage(testingKey: TestingKey, location: vscode.Location): Promise<boolean> {
        try {
            // –û—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç
            const document = await vscode.workspace.openTextDocument(location.uri);
            const editor = await vscode.window.showTextDocument(document);

            // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å–æ—Ä
            const keyPosition = location.range.start;
            editor.selection = new vscode.Selection(keyPosition, keyPosition);
            editor.revealRange(location.range, vscode.TextEditorRevealType.InCenter);

            // –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞
            const context = await this.contextAnalyzer.analyzeKeyContext(document, location, testingKey);
            
            // –ü–æ–¥—Å–≤–µ—Ç–∏—Ç—å Widget –∏ –µ–≥–æ –æ–±–ª–∞—Å—Ç—å
            await this.highlightKeyUsageContext(editor, context);

            // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            await this.showContextInformation(context, testingKey);

            return true;
        } catch (error) {
            console.error('Error navigating to key usage:', error);
            return false;
        }
    }

    /**
     * –ù–∞–π—Ç–∏ —Ç–æ—á–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∫–ª—é—á–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
     */
    private async findExactKeyPosition(document: vscode.TextDocument, testingKey: TestingKey): Promise<vscode.Position | null> {
        try {
            const line = document.lineAt(testingKey.line - 1);
            const lineText = line.text;
            
            // –ù–∞–π—Ç–∏ –ø–æ–∑–∏—Ü–∏—é –∏–º–µ–Ω–∏ –∫–ª—é—á–∞ –≤ —Å—Ç—Ä–æ–∫–µ
            const keyNameIndex = lineText.indexOf(testingKey.name);
            if (keyNameIndex !== -1) {
                return new vscode.Position(testingKey.line - 1, keyNameIndex);
            }

            return null;
        } catch (error) {
            console.error('Error finding exact key position:', error);
            return null;
        }
    }

    /**
     * –ü–æ–¥—Å–≤–µ—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞
     */
    private async highlightKeyDeclaration(editor: vscode.TextEditor, testingKey: TestingKey): Promise<void> {
        try {
            const document = editor.document;
            const line = document.lineAt(testingKey.line - 1);
            const lineText = line.text;

            // –ù–∞–π—Ç–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞
            const declarationRange = new vscode.Range(
                new vscode.Position(testingKey.line - 1, 0),
                new vscode.Position(testingKey.line - 1, lineText.length)
            );

            // –°–æ–∑–¥–∞—Ç—å –¥–µ–∫–æ—Ä–∞—Ü–∏—é –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            const declarationType = this.widgetHighlighter.createKeyDeclarationDecoration();
            editor.setDecorations(declarationType, [declarationRange]);

            // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–µ–∫–æ—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏
            const editorId = editor.document.uri.toString();
            if (!this.activeDecorations.has(editorId)) {
                this.activeDecorations.set(editorId, []);
            }
            this.activeDecorations.get(editorId)!.push(declarationType);

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                this.clearDecorationsForEditor(editorId);
            }, 5000);

        } catch (error) {
            console.error('Error highlighting key declaration:', error);
        }
    }

    /**
     * –ü–æ–¥—Å–≤–µ—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞
     */
    private async highlightKeyUsageContext(editor: vscode.TextEditor, context: KeyContext): Promise<void> {
        try {
            const editorId = editor.document.uri.toString();
            const decorations: vscode.TextEditorDecorationType[] = [];

            // –ü–æ–¥—Å–≤–µ—Ç–∏—Ç—å —Å–∞–º –∫–ª—é—á
            if (context.keyUsageRange) {
                const keyDecoration = this.widgetHighlighter.createKeyUsageDecoration();
                editor.setDecorations(keyDecoration, [context.keyUsageRange]);
                decorations.push(keyDecoration);
            }

            // –ü–æ–¥—Å–≤–µ—Ç–∏—Ç—å Widget –≥—Ä–∞–Ω–∏—Ü—ã
            if (context.widgetRange) {
                const widgetDecoration = this.widgetHighlighter.createWidgetBoundaryDecoration();
                editor.setDecorations(widgetDecoration, [context.widgetRange]);
                decorations.push(widgetDecoration);
            }

            // –ü–æ–¥—Å–≤–µ—Ç–∏—Ç—å –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏
            if (context.scopeRange) {
                const scopeDecoration = this.widgetHighlighter.createScopeHighlightDecoration();
                editor.setDecorations(scopeDecoration, [context.scopeRange]);
                decorations.push(scopeDecoration);
            }

            // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–µ–∫–æ—Ä–∞—Ü–∏–∏
            this.activeDecorations.set(editorId, decorations);

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                this.clearDecorationsForEditor(editorId);
            }, 8000);

        } catch (error) {
            console.error('Error highlighting key usage context:', error);
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
     */
    private async showContextInformation(context: KeyContext, testingKey: TestingKey): Promise<void> {
        try {
            let message = `üéØ Key: ${testingKey.name}`;
            
            if (context.widgetType) {
                message += `\nüì± Widget: ${context.widgetType}`;
            }
            
            if (context.methodName) {
                message += `\n‚öôÔ∏è Method: ${context.methodName}`;
            }
            
            if (context.scopeInfo) {
                message += `\nüîç Scope: ${context.scopeInfo}`;
            }

            // –ü–æ–∫–∞–∑–∞—Ç—å toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            vscode.window.showInformationMessage(message, { modal: false });

            // –¢–∞–∫–∂–µ –∑–∞–ø–∏—Å–∞—Ç—å –≤ Output Channel –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            this.logNavigationInfo(context, testingKey);

        } catch (error) {
            console.error('Error showing context information:', error);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–≤—å—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞
     */
    private getUsagePreview(location: vscode.Location): string {
        try {
            // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–ª—É—á—à–µ–Ω–æ –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
            const line = location.range.start.line + 1;
            return `Line ${line} - Key usage in widget`;
        } catch (error) {
            return 'Key usage';
        }
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –¥–µ–∫–æ—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
     */
    private clearDecorationsForEditor(editorId: string): void {
        const decorations = this.activeDecorations.get(editorId);
        if (decorations) {
            // –ù–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä
            const activeEditor = vscode.window.visibleTextEditors.find(
                editor => editor.document.uri.toString() === editorId
            );

            if (activeEditor) {
                decorations.forEach(decoration => {
                    activeEditor.setDecorations(decoration, []);
                    decoration.dispose();
                });
            } else {
                // –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç—å –¥–µ–∫–æ—Ä–∞—Ü–∏–∏
                decorations.forEach(decoration => decoration.dispose());
            }

            this.activeDecorations.delete(editorId);
        }
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–∫–æ—Ä–∞—Ü–∏–∏
     */
    clearAllDecorations(): void {
        for (const editorId of this.activeDecorations.keys()) {
            this.clearDecorationsForEditor(editorId);
        }
    }

    /**
     * –ó–∞–ø–∏—Å–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –ª–æ–≥
     */
    private logNavigationInfo(context: KeyContext, testingKey: TestingKey): void {
        try {
            console.log('Navigation completed:', {
                keyName: testingKey.name,
                keyValue: testingKey.value,
                widgetType: context.widgetType,
                methodName: context.methodName,
                scopeInfo: context.scopeInfo,
                filePath: context.location?.uri.fsPath,
                line: context.location?.range.start.line
            });
        } catch (error) {
            console.error('Error logging navigation info:', error);
        }
    }

    /**
     * Dispose –º–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    dispose(): void {
        this.clearAllDecorations();
        this.widgetHighlighter.dispose();
    }
}